"use client";

export const dynamic = 'force-dynamic';

import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import Link from "next/link";
import { useTranslation } from "react-i18next";
import './super-admin-dashboard.css';

interface SuperAdminStats {
  totalUsers: number;
  totalTutors: number;
  totalStudents: number;
  totalSessions: number;
  totalRevenue: number;
  activeUsers: number;
  pendingApprovals: number;
  systemHealth: string;
  totalAdmins: number;
  platformUptime: number;
  securityAlerts: number;
  dataUsage: number;
}

interface SystemAlert {
  id: string;
  type: 'info' | 'warning' | 'error' | 'success';
  title: string;
  message: string;
  timestamp: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
}

interface AdminUser {
  id: string;
  name: string;
  email: string;
  role: string;
  lastActive: string;
  permissions: string[];
  status: 'active' | 'inactive' | 'suspended';
}

interface User {
  id: string;
  name: string;
  email: string;
  role: string;
  status: 'active' | 'inactive';
  isOnline: boolean;
  lastSeen: string;
  createdAt: string;
  photo?: string;
  profile: {
    language?: string;
    country?: string;
    bio?: string;
    languageLevel?: string;
  };
  tutorProfile?: {
    subjects: string[];
    hourlyRate: number;
    isApproved: boolean;
    totalSessions: number;
    rating: number;
  };
  stats: {
    totalBookings: number;
    totalReviews: number;
    totalPayments: number;
    totalMessages: number;
  };
}

interface Conversation {
  userId: string;
  userName: string;
  userEmail: string;
  userRole: string;
  userPhoto?: string;
  isOnline: boolean;
  lastSeen: string;
  lastMessage: string;
  lastMessageTime: string;
  totalMessages: number;
}

interface Message {
  id: string;
  content: string;
  senderId: string;
  sender: {
    id: string;
    name: string;
    email: string;
    role: string;
    photo?: string;
  };
  bookingId: string;
  createdAt: string;
}

interface GlobalSettings {
  platform: {
    name: string;
    description: string;
    version: string;
    maintenanceMode: boolean;
    maintenanceMessage: string;
    maxFileSize: number;
    allowedFileTypes: string[];
    sessionTimeout: number;
    maxSessionsPerUser: number;
  };
  features: {
    instantBooking: boolean;
    videoRecording: boolean;
    groupSessions: boolean;
    mobileApp: boolean;
    notifications: boolean;
    badges: boolean;
    reviews: boolean;
    payments: boolean;
  };
  security: {
    twoFactorAuth: boolean;
    passwordMinLength: number;
    sessionTimeout: number;
    maxLoginAttempts: number;
    lockoutDuration: number;
    sslRequired: boolean;
    apiRateLimit: number;
  };
  payments: {
    currency: string;
    taxRate: number;
    platformFee: number;
    minimumWithdrawal: number;
    maximumWithdrawal: number;
    autoPayout: boolean;
    payoutSchedule: string;
    supportedGateways: string[];
  };
  notifications: {
    emailEnabled: boolean;
    smsEnabled: boolean;
    pushEnabled: boolean;
    defaultEmailTemplate: string;
    smsProvider: string;
    notificationSchedule: string;
  };
  analytics: {
    trackingEnabled: boolean;
    googleAnalyticsId: string;
    facebookPixelId: string;
    dataRetentionDays: number;
    anonymizeData: boolean;
  };
  support: {
    supportEmail: string;
    supportPhone: string;
    liveChatEnabled: boolean;
    helpCenterUrl: string;
    ticketSystem: string;
    autoResponseEnabled: boolean;
  };
}

export default function SuperAdminDashboard() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const { t } = useTranslation();
  const [stats, setStats] = useState<SuperAdminStats | null>(null);
  const [systemAlerts, setSystemAlerts] = useState<SystemAlert[]>([]);
  const [adminUsers, setAdminUsers] = useState<AdminUser[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [userSearch, setUserSearch] = useState('');
  const [userRoleFilter, setUserRoleFilter] = useState('');
  const [userStatusFilter, setUserStatusFilter] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [newMessage, setNewMessage] = useState('');
  const [sendingMessage, setSendingMessage] = useState(false);
  const [showBulkMessage, setShowBulkMessage] = useState(false);
  const [bulkMessage, setBulkMessage] = useState('');
  const [selectedUsersForBulk, setSelectedUsersForBulk] = useState<string[]>([]);
  const [globalSettings, setGlobalSettings] = useState<GlobalSettings | null>(null);
  const [settingsLoading, setSettingsLoading] = useState(false);
  const [activeSettingsTab, setActiveSettingsTab] = useState('platform');
  const [showSettingsModal, setShowSettingsModal] = useState(false);
  const [editingSettings, setEditingSettings] = useState<Partial<GlobalSettings>>({});
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [confirmAction, setConfirmAction] = useState<{ type: string; data: any } | null>(null);
  const [showTooltip, setShowTooltip] = useState<string | null>(null);
  const [notification, setNotification] = useState<{ type: 'success' | 'error' | 'info'; message: string } | null>(null);
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());

  useEffect(() => {
    if (status === "loading") return;
    
    if (!session) {
      router.push("/auth/signin");
      return;
    }

    // Check if user is a super admin
    if ((session.user as any)?.role !== "SUPER_ADMIN") {
      router.push("/");
      return;
    }

    fetchSuperAdminData();

    // Set up auto-refresh every 30 seconds
    const interval = setInterval(fetchSuperAdminData, 30000);

    return () => clearInterval(interval);
  }, [session, status, router]);

  const fetchSuperAdminData = async () => {
    try {
      setLoading(true);
      
      // Fetch super admin statistics
      const statsResponse = await fetch('/api/admin/analytics?type=overview&period=30d');
      const statsData = await statsResponse.json();
      
      // Fetch super admin specific data
      const superAdminResponse = await fetch('/api/super-admin?action=overview');
      const superAdminData = await superAdminResponse.json();
      
      // Fetch admin users
      const adminsResponse = await fetch('/api/super-admin?action=admins');
      const adminsData = await adminsResponse.json();
      
      // Fetch system alerts
      const alertsResponse = await fetch('/api/super-admin?action=system');
      const alertsData = await alertsResponse.json();
      
      if (statsData.success) {
        setStats({
          totalUsers: statsData.data.totalUsers,
          totalTutors: statsData.data.totalTutors,
          totalStudents: statsData.data.totalStudents,
          totalSessions: statsData.data.totalSessions,
          totalRevenue: statsData.data.totalRevenue,
          activeUsers: statsData.data.activeUsers,
          pendingApprovals: superAdminData.success ? superAdminData.data.pendingApprovals : 0,
          systemHealth: superAdminData.success ? superAdminData.data.systemHealth : 'Unknown',
          totalAdmins: superAdminData.success ? superAdminData.data.totalAdmins : 0,
          platformUptime: superAdminData.success ? superAdminData.data.platformUptime : 0,
          securityAlerts: superAdminData.success ? superAdminData.data.securityAlerts : 0,
          dataUsage: superAdminData.success ? superAdminData.data.dataUsage : 0
        });
      }

      if (adminsData.success) {
        setAdminUsers(adminsData.data);
      } else {
        setAdminUsers([]);
      }

      if (alertsData.success) {
        setSystemAlerts(alertsData.data.alerts || []);
      } else {
        setSystemAlerts([]);
      }

    } catch (error) {
      console.error('Error fetching super admin data:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchUsers = async () => {
    try {
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '20'
      });
      
      if (userSearch) params.append('search', userSearch);
      if (userRoleFilter) params.append('role', userRoleFilter);
      if (userStatusFilter) params.append('status', userStatusFilter);

      const response = await fetch(`/api/super-admin/users?${params}`);
      const data = await response.json();

      if (data.success) {
        setUsers(data.data.users);
        setTotalPages(data.data.pagination.totalPages);
      }
    } catch (error) {
      console.error('Error fetching users:', error);
    }
  };

  const fetchConversations = async () => {
    try {
      const response = await fetch('/api/super-admin/messages?action=conversations');
      const data = await response.json();

      if (data.success) {
        setConversations(data.data.conversations);
      }
    } catch (error) {
      console.error('Error fetching conversations:', error);
    }
  };

  const fetchMessages = async (userId: string) => {
    try {
      const response = await fetch(`/api/super-admin/messages?action=messages&userId=${userId}`);
      const data = await response.json();

      if (data.success) {
        setMessages(data.data.messages);
      }
    } catch (error) {
      console.error('Error fetching messages:', error);
    }
  };

  const updateUser = async (userId: string, updates: any) => {
    try {
      const response = await fetch(`/api/super-admin/users/${userId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
      });

      const data = await response.json();

      if (data.success) {
        showNotification('success', 'User updated successfully');
        fetchUsers(); // Refresh the user list
      } else {
        showNotification('error', data.error || 'Failed to update user');
      }
    } catch (error) {
      console.error('Error updating user:', error);
      showNotification('error', 'Failed to update user. Please try again.');
    }
  };

  const deleteUser = async (userId: string) => {
    try {
      const response = await fetch(`/api/super-admin/users/${userId}`, {
        method: 'DELETE'
      });

      const data = await response.json();

      if (data.success) {
        showNotification('success', 'User deleted successfully');
        fetchUsers(); // Refresh the user list
      } else {
        showNotification('error', data.error || 'Failed to delete user');
      }
    } catch (error) {
      console.error('Error deleting user:', error);
      showNotification('error', 'Failed to delete user. Please try again.');
    }
  };

  const sendMessage = async () => {
    if (!newMessage.trim() || !selectedUser) return;

    try {
      setSendingMessage(true);
      const response = await fetch('/api/super-admin/messages', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: selectedUser.id,
          content: newMessage
        })
      });

      const data = await response.json();

      if (data.success) {
        setNewMessage('');
        showNotification('success', 'Message sent successfully');
        fetchMessages(selectedUser.id); // Refresh messages
      } else {
        showNotification('error', data.error || 'Failed to send message');
      }
    } catch (error) {
      console.error('Error sending message:', error);
      showNotification('error', 'Failed to send message. Please try again.');
    } finally {
      setSendingMessage(false);
    }
  };

  const sendBulkMessage = async () => {
    if (!bulkMessage.trim() || selectedUsersForBulk.length === 0) return;

    try {
      setSendingMessage(true);
      const response = await fetch('/api/super-admin/messages/bulk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userIds: selectedUsersForBulk,
          content: bulkMessage
        })
      });

      const data = await response.json();

      if (data.success) {
        setBulkMessage('');
        setSelectedUsersForBulk([]);
        setShowBulkMessage(false);
        showNotification('success', `Message sent to ${selectedUsersForBulk.length} users`);
      } else {
        showNotification('error', data.error || 'Failed to send bulk message');
      }
    } catch (error) {
      console.error('Error sending bulk message:', error);
      showNotification('error', 'Failed to send bulk message. Please try again.');
    } finally {
      setSendingMessage(false);
    }
  };

  const fetchGlobalSettings = async () => {
    try {
      setSettingsLoading(true);
      const response = await fetch('/api/super-admin/settings');
      const data = await response.json();

      if (data.success) {
        setGlobalSettings(data.data);
        setEditingSettings(data.data);
      }
    } catch (error) {
      console.error('Error fetching global settings:', error);
    } finally {
      setSettingsLoading(false);
    }
  };

  const updateGlobalSettings = async (category: string, settings: any) => {
    try {
      setSettingsLoading(true);
      const response = await fetch('/api/super-admin/settings', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ category, settings })
      });

      const data = await response.json();

      if (data.success) {
        setGlobalSettings(data.data);
        setEditingSettings(data.data);
        showNotification('success', 'Settings updated successfully!');
      } else {
        showNotification('error', 'Failed to update settings: ' + data.error);
      }
    } catch (error) {
      console.error('Error updating global settings:', error);
      showNotification('error', 'Failed to update settings');
    } finally {
      setSettingsLoading(false);
    }
  };

  const resetSettingsToDefaults = async () => {
    try {
      setSettingsLoading(true);
      const response = await fetch('/api/super-admin/settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'reset_to_defaults' })
      });

      const data = await response.json();

      if (data.success) {
        setGlobalSettings(data.result);
        setEditingSettings(data.result);
        showNotification('success', 'Settings reset to defaults successfully!');
      } else {
        showNotification('error', 'Failed to reset settings: ' + data.error);
      }
    } catch (error) {
      console.error('Error resetting settings:', error);
      showNotification('error', 'Failed to reset settings');
    } finally {
      setSettingsLoading(false);
    }
  };

  const exportSettings = async () => {
    try {
      const response = await fetch('/api/super-admin/settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'export_settings' })
      });

      const data = await response.json();

      if (data.success) {
        const blob = new Blob([JSON.stringify(data.result, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `learnvastora-settings-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        showNotification('success', 'Settings exported successfully');
      } else {
        showNotification('error', 'Failed to export settings');
      }
    } catch (error) {
      console.error('Error exporting settings:', error);
      showNotification('error', 'Failed to export settings. Please try again.');
    }
  };

  const importSettings = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const settings = JSON.parse(e.target?.result as string);
        
        const response = await fetch('/api/super-admin/settings', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'import_settings', settings })
        });

        const data = await response.json();

        if (data.success) {
          setGlobalSettings(data.result);
          setEditingSettings(data.result);
          showNotification('success', 'Settings imported successfully');
        } else {
          showNotification('error', data.error || 'Failed to import settings');
        }
      } catch (error) {
        console.error('Error importing settings:', error);
        showNotification('error', 'Failed to import settings. Please check the file format.');
      }
    };
    reader.readAsText(file);
  };

  // Load data when tab changes
  useEffect(() => {
    if (activeTab === 'users') {
      fetchUsers();
    } else if (activeTab === 'messages') {
      fetchConversations();
    } else if (activeTab === 'settings') {
      fetchGlobalSettings();
    }
  }, [activeTab, currentPage, userSearch, userRoleFilter, userStatusFilter]);

  const getAlertIcon = (type: string) => {
    switch (type) {
      case 'success': return '✅';
      case 'warning': return '⚠️';
      case 'error': return '❌';
      case 'info': return 'ℹ️';
      default: return '📝';
    }
  };

  const getAlertColor = (type: string) => {
    switch (type) {
      case 'success': return '#28a745';
      case 'warning': return '#ffc107';
      case 'error': return '#dc3545';
      case 'info': return '#17a2b8';
      default: return '#6c757d';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return '#dc3545';
      case 'high': return '#fd7e14';
      case 'medium': return '#ffc107';
      case 'low': return '#28a745';
      default: return '#6c757d';
    }
  };

  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    
    if (diff < 60 * 1000) return 'Just now';
    if (diff < 60 * 60 * 1000) return `${Math.floor(diff / (60 * 1000))}m ago`;
    if (diff < 24 * 60 * 60 * 1000) return `${Math.floor(diff / (60 * 60 * 1000))}h ago`;
    return date.toLocaleDateString();
  };

  const showNotification = (type: 'success' | 'error' | 'info', message: string) => {
    setNotification({ type, message });
    setTimeout(() => setNotification(null), 5000);
  };

  const handleConfirmAction = (type: string, data: any, message: string) => {
    setConfirmAction({ type, data });
    setShowConfirmDialog(true);
  };

  const executeConfirmedAction = async () => {
    if (!confirmAction) return;

    try {
      switch (confirmAction.type) {
        case 'deleteUser':
          await deleteUser(confirmAction.data);
          showNotification('success', 'User deleted successfully');
          break;
        case 'resetSettings':
          await resetSettingsToDefaults();
          showNotification('success', 'Settings reset to defaults');
          break;
        case 'bulkMessage':
          await sendBulkMessage();
          showNotification('success', 'Bulk message sent successfully');
          break;
        default:
          break;
      }
    } catch (error) {
      showNotification('error', 'Action failed. Please try again.');
    } finally {
      setShowConfirmDialog(false);
      setConfirmAction(null);
    }
  };

  const toggleAutoRefresh = () => {
    setAutoRefresh(!autoRefresh);
    if (!autoRefresh) {
      showNotification('info', 'Auto-refresh enabled. Data will update every 30 seconds.');
    }
  };

  // Auto-refresh effect
  useEffect(() => {
    if (!autoRefresh) return;

    const interval = setInterval(() => {
      fetchSuperAdminData();
      setLastRefresh(new Date());
    }, 30000);

    return () => clearInterval(interval);
  }, [autoRefresh]);

  if (status === "loading" || loading) {
    return (
      <div className="super-admin-dashboard">
        <div className="super-admin-loading">
          <div className="super-admin-spinner"></div>
          <p>Loading super admin dashboard...</p>
        </div>
      </div>
    );
  }

  if (!session) {
    return null;
  }

  return (
    <div className="super-admin-dashboard">
      {/* Notification Toast */}
      {notification && (
        <div className={`super-admin-notification ${notification.type}`}>
          <div className="super-admin-notification-content">
            <i className={`fas fa-${notification.type === 'success' ? 'check-circle' : notification.type === 'error' ? 'exclamation-circle' : 'info-circle'}`}></i>
            <span>{notification.message}</span>
          </div>
          <button 
            onClick={() => setNotification(null)}
            className="super-admin-notification-close"
          >
            <i className="fas fa-times"></i>
          </button>
        </div>
      )}

      {/* Super Admin Header */}
      <div className="super-admin-header">
        <div className="super-admin-header-content">
          <div className="super-admin-header-left">
            <div className="super-admin-breadcrumb">
              <span className="super-admin-breadcrumb-item">Dashboard</span>
              <i className="fas fa-chevron-right super-admin-breadcrumb-separator"></i>
              <span className="super-admin-breadcrumb-item active">
                {activeTab === 'overview' && 'Overview'}
                {activeTab === 'users' && 'User Management'}
                {activeTab === 'messages' && 'Messaging'}
                {activeTab === 'admins' && 'Admin Management'}
                {activeTab === 'system' && 'System'}
                {activeTab === 'security' && 'Security'}
                {activeTab === 'analytics' && 'Analytics'}
                {activeTab === 'settings' && 'Global Settings'}
              </span>
            </div>
            <h1 className="super-admin-title">Super Admin Dashboard</h1>
            <p className="super-admin-subtitle">Complete platform management and oversight</p>
          </div>
          <div className="super-admin-header-right">
            <div className="super-admin-quick-actions">
              <button 
                onClick={toggleAutoRefresh}
                className={`super-admin-quick-action ${autoRefresh ? 'active' : ''}`}
                title="Toggle auto-refresh"
              >
                <i className="fas fa-sync-alt"></i>
                {autoRefresh && <span className="super-admin-quick-action-indicator"></span>}
              </button>
              <button 
                onClick={fetchSuperAdminData}
                className="super-admin-quick-action"
                title="Manual refresh"
                disabled={loading}
              >
                <i className="fas fa-redo"></i>
              </button>
              <div className="super-admin-last-refresh">
                Last: {lastRefresh.toLocaleTimeString()}
              </div>
            </div>
            <div className="super-admin-user-info">
              <div className="super-admin-avatar">
                {session.user?.name?.[0] || 'S'}
              </div>
              <div className="super-admin-user-details">
                <div className="super-admin-user-name">{session.user?.name}</div>
                <div className="super-admin-user-role">Super Administrator</div>
              </div>
            </div>
            <Link href="/api/auth/signout" className="super-admin-logout-btn">
              <i className="fas fa-sign-out-alt"></i>
              Logout
            </Link>
          </div>
        </div>
      </div>

      <div className="super-admin-container">
        {/* Super Admin Stats */}
        <div className="super-admin-stats-grid">
          <div className="super-admin-stat-card">
            <div className="super-admin-stat-icon">👥</div>
            <div className="super-admin-stat-content">
              <div className="super-admin-stat-value">{stats?.totalUsers || 0}</div>
              <div className="super-admin-stat-label">Total Users</div>
              <div className="super-admin-stat-trend positive">
                <i className="fas fa-arrow-up"></i>
                +12% this week
              </div>
            </div>
          </div>
          
          <div className="super-admin-stat-card">
            <div className="super-admin-stat-icon">👨‍💼</div>
            <div className="super-admin-stat-content">
              <div className="super-admin-stat-value">{stats?.totalAdmins || 0}</div>
              <div className="super-admin-stat-label">Administrators</div>
              <div className="super-admin-stat-trend neutral">
                <i className="fas fa-minus"></i>
                No change
              </div>
            </div>
          </div>
          
          <div className="super-admin-stat-card">
            <div className="super-admin-stat-icon">💰</div>
            <div className="super-admin-stat-content">
              <div className="super-admin-stat-value">${stats?.totalRevenue?.toLocaleString() || 0}</div>
              <div className="super-admin-stat-label">Total Revenue</div>
              <div className="super-admin-stat-trend positive">
                <i className="fas fa-arrow-up"></i>
                +8% this month
              </div>
            </div>
          </div>
          
          <div className="super-admin-stat-card">
            <div className="super-admin-stat-icon">🟢</div>
            <div className="super-admin-stat-content">
              <div className="super-admin-stat-value">{stats?.platformUptime || 0}%</div>
              <div className="super-admin-stat-label">Platform Uptime</div>
              <div className="super-admin-stat-trend positive">
                <i className="fas fa-arrow-up"></i>
                Excellent
              </div>
            </div>
          </div>
          
          <div className="super-admin-stat-card">
            <div className="super-admin-stat-icon">⚠️</div>
            <div className="super-admin-stat-content">
              <div className="super-admin-stat-value">{stats?.securityAlerts || 0}</div>
              <div className="super-admin-stat-label">Security Alerts</div>
              <div className="super-admin-stat-trend negative">
                <i className="fas fa-arrow-down"></i>
                -3 this week
              </div>
            </div>
          </div>
          
          <div className="super-admin-stat-card">
            <div className="super-admin-stat-icon">💾</div>
            <div className="super-admin-stat-content">
              <div className="super-admin-stat-value">{stats?.dataUsage || 0}%</div>
              <div className="super-admin-stat-label">Data Usage</div>
              <div className="super-admin-stat-trend neutral">
                <i className="fas fa-minus"></i>
                Stable
              </div>
            </div>
          </div>
        </div>

        {/* Super Admin Navigation */}
        <div className="super-admin-nav-tabs">
          <button 
            className={`super-admin-nav-tab ${activeTab === 'overview' ? 'active' : ''}`}
            onClick={() => setActiveTab('overview')}
            title="Dashboard overview and system status"
          >
            <i className="fas fa-tachometer-alt"></i>
            Overview
          </button>
          <button 
            className={`super-admin-nav-tab ${activeTab === 'users' ? 'active' : ''}`}
            onClick={() => setActiveTab('users')}
            title="Manage all platform users"
          >
            <i className="fas fa-users"></i>
            User Management
            {stats?.pendingApprovals && stats.pendingApprovals > 0 && (
              <span className="super-admin-nav-badge">{stats.pendingApprovals}</span>
            )}
          </button>
          <button 
            className={`super-admin-nav-tab ${activeTab === 'messages' ? 'active' : ''}`}
            onClick={() => setActiveTab('messages')}
            title="Send messages to users"
          >
            <i className="fas fa-envelope"></i>
            Messaging
          </button>
          <button 
            className={`super-admin-nav-tab ${activeTab === 'admins' ? 'active' : ''}`}
            onClick={() => setActiveTab('admins')}
            title="Manage admin users"
          >
            <i className="fas fa-user-shield"></i>
            Admin Management
          </button>
          <button 
            className={`super-admin-nav-tab ${activeTab === 'system' ? 'active' : ''}`}
            onClick={() => setActiveTab('system')}
            title="System monitoring and health"
          >
            <i className="fas fa-server"></i>
            System
          </button>
          <button 
            className={`super-admin-nav-tab ${activeTab === 'security' ? 'active' : ''}`}
            onClick={() => setActiveTab('security')}
            title="Security monitoring and alerts"
          >
            <i className="fas fa-shield-alt"></i>
            Security
            {stats?.securityAlerts && stats.securityAlerts > 0 && (
              <span className="super-admin-nav-badge warning">{stats.securityAlerts}</span>
            )}
          </button>
          <button 
            className={`super-admin-nav-tab ${activeTab === 'analytics' ? 'active' : ''}`}
            onClick={() => setActiveTab('analytics')}
            title="Analytics and reporting"
          >
            <i className="fas fa-chart-line"></i>
            Analytics
          </button>
          <button 
            className={`super-admin-nav-tab ${activeTab === 'settings' ? 'active' : ''}`}
            onClick={() => setActiveTab('settings')}
            title="Global platform settings"
          >
            <i className="fas fa-cogs"></i>
            Settings
          </button>
        </div>

        {/* Tab Content */}
        <div className="super-admin-content">
          {activeTab === 'overview' && (
            <div className="super-admin-overview">
              <div className="super-admin-content-grid">
                {/* System Alerts */}
                <div className="super-admin-card">
                  <div className="super-admin-card-header">
                    <h3>System Alerts</h3>
                    <Link href="/super-admin/alerts" className="super-admin-card-link">View All</Link>
                  </div>
                  <div className="super-admin-card-body">
                    <div className="super-admin-alerts-list">
                      {systemAlerts.map((alert) => (
                        <div key={alert.id} className="super-admin-alert-item">
                          <div className="super-admin-alert-icon" style={{ color: getAlertColor(alert.type) }}>
                            {getAlertIcon(alert.type)}
                          </div>
                          <div className="super-admin-alert-content">
                            <div className="super-admin-alert-header">
                              <div className="super-admin-alert-title">{alert.title}</div>
                              <div 
                                className="super-admin-alert-priority"
                                style={{ backgroundColor: getPriorityColor(alert.priority) }}
                              >
                                {alert.priority}
                              </div>
                            </div>
                            <div className="super-admin-alert-message">{alert.message}</div>
                            <div className="super-admin-alert-time">{formatTimestamp(alert.timestamp)}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Quick Actions */}
                <div className="super-admin-card">
                  <div className="super-admin-card-header">
                    <h3>Quick Actions</h3>
                  </div>
                  <div className="super-admin-card-body">
                    <div className="super-admin-actions-grid">
                      <Link href="/super-admin/admins" className="super-admin-action-btn">
                        <i className="fas fa-user-shield"></i>
                        Manage Admins
                      </Link>
                      <Link href="/super-admin/system" className="super-admin-action-btn">
                        <i className="fas fa-server"></i>
                        System Monitor
                      </Link>
                      <Link href="/super-admin/security" className="super-admin-action-btn">
                        <i className="fas fa-shield-alt"></i>
                        Security Center
                      </Link>
                      <Link href="/super-admin/backup" className="super-admin-action-btn">
                        <i className="fas fa-database"></i>
                        Backup System
                      </Link>
                      <Link href="/super-admin/logs" className="super-admin-action-btn">
                        <i className="fas fa-file-alt"></i>
                        View Logs
                      </Link>
                      <Link href="/super-admin/settings" className="super-admin-action-btn">
                        <i className="fas fa-cogs"></i>
                        Global Settings
                      </Link>
                    </div>
                  </div>
                </div>

                {/* System Health */}
                <div className="super-admin-card">
                  <div className="super-admin-card-header">
                    <h3>System Health</h3>
                  </div>
                  <div className="super-admin-card-body">
                    <div className="super-admin-health-status">
                      <div className="super-admin-health-indicator">
                        <div className="super-admin-health-dot"></div>
                        <span>{stats?.systemHealth || 'Unknown'}</span>
                      </div>
                      <div className="super-admin-health-metrics">
                        <div className="super-admin-health-metric">
                          <span className="super-admin-health-label">Platform Uptime</span>
                          <span className="super-admin-health-value">{stats?.platformUptime || 0}%</span>
                        </div>
                        <div className="super-admin-health-metric">
                          <span className="super-admin-health-label">Data Usage</span>
                          <span className="super-admin-health-value">{stats?.dataUsage || 0}%</span>
                        </div>
                        <div className="super-admin-health-metric">
                          <span className="super-admin-health-label">Security Status</span>
                          <span className="super-admin-health-value">Secure</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'admins' && (
            <div className="super-admin-admins">
              <div className="super-admin-card">
                <div className="super-admin-card-header">
                  <h3>Administrator Management</h3>
                  <div className="super-admin-card-actions">
                    <button className="super-admin-btn primary">
                      <i className="fas fa-plus"></i>
                      Add Admin
                    </button>
                    <button className="super-admin-btn secondary">
                      <i className="fas fa-download"></i>
                      Export
                    </button>
                  </div>
                </div>
                <div className="super-admin-card-body">
                  <div className="super-admin-admins-list">
                    {adminUsers.map((admin) => (
                      <div key={admin.id} className="super-admin-admin-item">
                        <div className="super-admin-admin-info">
                          <div className="super-admin-admin-avatar">
                            {admin.name[0]}
                          </div>
                          <div className="super-admin-admin-details">
                            <div className="super-admin-admin-name">{admin.name}</div>
                            <div className="super-admin-admin-email">{admin.email}</div>
                            <div className="super-admin-admin-role">{admin.role}</div>
                          </div>
                        </div>
                        <div className="super-admin-admin-status">
                          <div className={`super-admin-status-badge ${admin.status}`}>
                            {admin.status}
                          </div>
                          <div className="super-admin-admin-last-active">
                            Last active: {formatTimestamp(admin.lastActive)}
                          </div>
                        </div>
                        <div className="super-admin-admin-actions">
                          <button className="super-admin-btn small">
                            <i className="fas fa-edit"></i>
                          </button>
                          <button className="super-admin-btn small">
                            <i className="fas fa-key"></i>
                          </button>
                          <button className="super-admin-btn small danger">
                            <i className="fas fa-trash"></i>
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'users' && (
            <div className="super-admin-users">
              <div className="super-admin-card">
                <div className="super-admin-card-header">
                  <h3>User Management</h3>
                  <div className="super-admin-card-actions">
                    <button 
                      className="super-admin-btn primary"
                      onClick={() => setShowBulkMessage(true)}
                    >
                      <i className="fas fa-broadcast-tower"></i>
                      Send Bulk Message
                    </button>
                    <button className="super-admin-btn secondary">
                      <i className="fas fa-download"></i>
                      Export
                    </button>
                  </div>
                </div>
                <div className="super-admin-card-body">
                  {/* Filters */}
                  <div className="super-admin-filters">
                    <input
                      type="text"
                      placeholder="Search users..."
                      value={userSearch}
                      onChange={(e) => setUserSearch(e.target.value)}
                      className="super-admin-search-input"
                    />
                    <select
                      value={userRoleFilter}
                      onChange={(e) => setUserRoleFilter(e.target.value)}
                      className="super-admin-select"
                    >
                      <option value="">All Roles</option>
                      <option value="STUDENT">Students</option>
                      <option value="TUTOR">Tutors</option>
                      <option value="ADMIN">Admins</option>
                    </select>
                    <select
                      value={userStatusFilter}
                      onChange={(e) => setUserStatusFilter(e.target.value)}
                      className="super-admin-select"
                    >
                      <option value="">All Status</option>
                      <option value="active">Active</option>
                      <option value="inactive">Inactive</option>
                    </select>
                  </div>

                  {/* Users List */}
                  <div className="super-admin-users-list">
                    {users.map((user) => (
                      <div key={user.id} className="super-admin-user-item">
                        <div className="super-admin-user-info">
                          <div className="super-admin-user-avatar">
                            {user.photo ? (
                              <img src={user.photo} alt={user.name} />
                            ) : (
                              <div className="super-admin-avatar-placeholder">
                                {user.name[0]}
                              </div>
                            )}
                            {user.isOnline && (
                              <div className="super-admin-online-indicator"></div>
                            )}
                          </div>
                          <div className="super-admin-user-details">
                            <div className="super-admin-user-name">{user.name}</div>
                            <div className="super-admin-user-email">{user.email}</div>
                            <div className="super-admin-user-role">{user.role}</div>
                            <div className="super-admin-user-stats">
                              {user.stats.totalBookings} bookings • {user.stats.totalMessages} messages
                            </div>
                          </div>
                        </div>
                        <div className="super-admin-user-status">
                          <div className={`super-admin-status-badge ${user.status}`}>
                            {user.status}
                          </div>
                          <div className="super-admin-user-last-seen">
                            Last seen: {formatTimestamp(user.lastSeen)}
                          </div>
                        </div>
                        <div className="super-admin-user-actions">
                          <button 
                            className="super-admin-btn small"
                            onClick={() => setSelectedUser(user)}
                          >
                            <i className="fas fa-edit"></i>
                          </button>
                          <button 
                            className="super-admin-btn small"
                            onClick={() => {
                              setSelectedConversation({
                                userId: user.id,
                                userName: user.name,
                                userEmail: user.email,
                                userRole: user.role,
                                userPhoto: user.photo,
                                isOnline: user.isOnline,
                                lastSeen: user.lastSeen,
                                lastMessage: '',
                                lastMessageTime: user.lastSeen,
                                totalMessages: user.stats.totalMessages
                              });
                              setActiveTab('messages');
                            }}
                          >
                            <i className="fas fa-envelope"></i>
                          </button>
                          <button 
                            className="super-admin-btn small danger"
                            onClick={() => handleConfirmAction('deleteUser', user, `Are you sure you want to delete user "${user.name}"?`)}
                          >
                            <i className="fas fa-trash"></i>
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>

                  {/* Pagination */}
                  <div className="super-admin-pagination">
                    <button 
                      className="super-admin-btn"
                      disabled={currentPage === 1}
                      onClick={() => setCurrentPage(currentPage - 1)}
                    >
                      Previous
                    </button>
                    <span className="super-admin-page-info">
                      Page {currentPage} of {totalPages}
                    </span>
                    <button 
                      className="super-admin-btn"
                      disabled={currentPage === totalPages}
                      onClick={() => setCurrentPage(currentPage + 1)}
                    >
                      Next
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'messages' && (
            <div className="super-admin-messages">
              <div className="super-admin-messages-layout">
                {/* Conversations Sidebar */}
                <div className="super-admin-conversations-sidebar">
                  <div className="super-admin-sidebar-header">
                    <h3>Conversations</h3>
                    <button 
                      className="super-admin-btn primary"
                      onClick={() => setShowBulkMessage(true)}
                    >
                      <i className="fas fa-broadcast-tower"></i>
                      Bulk Message
                    </button>
                  </div>
                  <div className="super-admin-conversations-list">
                    {conversations.map((conversation) => (
                      <div
                        key={conversation.userId}
                        className={`super-admin-conversation-item ${selectedConversation?.userId === conversation.userId ? 'active' : ''}`}
                        onClick={() => {
                          setSelectedConversation(conversation);
                          fetchMessages(conversation.userId);
                        }}
                      >
                        <div className="super-admin-conversation-avatar">
                          {conversation.userPhoto ? (
                            <img src={conversation.userPhoto} alt={conversation.userName} />
                          ) : (
                            <div className="super-admin-avatar-placeholder">
                              {conversation.userName[0]}
                            </div>
                          )}
                          {conversation.isOnline && (
                            <div className="super-admin-online-indicator"></div>
                          )}
                        </div>
                        <div className="super-admin-conversation-content">
                          <div className="super-admin-conversation-header">
                            <h4>{conversation.userName}</h4>
                            <span className="super-admin-conversation-time">
                              {formatTimestamp(conversation.lastMessageTime)}
                            </span>
                          </div>
                          <p className="super-admin-conversation-last-message">
                            {conversation.lastMessage}
                          </p>
                          <div className="super-admin-conversation-footer">
                            <span className="super-admin-conversation-role">{conversation.userRole}</span>
                            <span className="super-admin-conversation-count">{conversation.totalMessages} messages</span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Messages Area */}
                <div className="super-admin-messages-area">
                  {selectedConversation ? (
                    <>
                      <div className="super-admin-messages-header">
                        <div className="super-admin-messages-user-info">
                          <div className="super-admin-messages-avatar">
                            {selectedConversation.userPhoto ? (
                              <img src={selectedConversation.userPhoto} alt={selectedConversation.userName} />
                            ) : (
                              <div className="super-admin-avatar-placeholder">
                                {selectedConversation.userName[0]}
                              </div>
                            )}
                            {selectedConversation.isOnline && (
                              <div className="super-admin-online-indicator"></div>
                            )}
                          </div>
                          <div className="super-admin-messages-user-details">
                            <h3>{selectedConversation.userName}</h3>
                            <p>{selectedConversation.userEmail} • {selectedConversation.userRole}</p>
                          </div>
                        </div>
                      </div>

                      <div className="super-admin-messages-list">
                        {messages.map((message) => (
                          <div
                            key={message.id}
                            className={`super-admin-message ${message.sender.role === 'SUPER_ADMIN' ? 'sent' : 'received'}`}
                          >
                            <div className="super-admin-message-content">
                              <p>{message.content}</p>
                              <span className="super-admin-message-time">
                                {formatTimestamp(message.createdAt)}
                              </span>
                            </div>
                          </div>
                        ))}
                      </div>

                      <div className="super-admin-message-input">
                        <input
                          type="text"
                          placeholder="Type your message..."
                          value={newMessage}
                          onChange={(e) => setNewMessage(e.target.value)}
                          onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                          className="super-admin-message-field"
                        />
                        <button
                          onClick={sendMessage}
                          disabled={sendingMessage || !newMessage.trim()}
                          className="super-admin-btn primary"
                        >
                          <i className="fas fa-paper-plane"></i>
                        </button>
                      </div>
                    </>
                  ) : (
                    <div className="super-admin-messages-empty">
                      <div className="super-admin-empty-icon">💬</div>
                      <h3>Select a conversation</h3>
                      <p>Choose a user from the sidebar to start messaging</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'system' && (
            <div className="super-admin-system">
              <div className="super-admin-card">
                <div className="super-admin-card-header">
                  <h3>System Monitoring</h3>
                  <div className="super-admin-card-actions">
                    <button className="super-admin-btn primary">
                      <i className="fas fa-sync"></i>
                      Refresh
                    </button>
                  </div>
                </div>
                <div className="super-admin-card-body">
                  <p>System monitoring interface will be implemented here.</p>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'security' && (
            <div className="super-admin-security">
              <div className="super-admin-card">
                <div className="super-admin-card-header">
                  <h3>Security Center</h3>
                  <div className="super-admin-card-actions">
                    <button className="super-admin-btn primary">
                      <i className="fas fa-shield-alt"></i>
                      Security Scan
                    </button>
                  </div>
                </div>
                <div className="super-admin-card-body">
                  <p>Security management interface will be implemented here.</p>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'analytics' && (
            <div className="super-admin-analytics">
              <div className="super-admin-card">
                <div className="super-admin-card-header">
                  <h3>Advanced Analytics</h3>
                  <div className="super-admin-card-actions">
                    <Link href="/admin/analytics" className="super-admin-btn primary">
                      <i className="fas fa-chart-line"></i>
                      View Analytics
                    </Link>
                  </div>
                </div>
                <div className="super-admin-card-body">
                  <p>Advanced analytics interface will be implemented here.</p>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'settings' && (
            <div className="super-admin-settings">
              <div className="super-admin-card">
                <div className="super-admin-card-header">
                  <h3>Global Settings</h3>
                  <div className="super-admin-card-actions">
                    <button 
                      className="super-admin-btn secondary"
                      onClick={exportSettings}
                    >
                      <i className="fas fa-download"></i>
                      Export
                    </button>
                    <label className="super-admin-btn secondary">
                      <i className="fas fa-upload"></i>
                      Import
                      <input
                        type="file"
                        accept=".json"
                        onChange={importSettings}
                        style={{ display: 'none' }}
                      />
                    </label>
                    <button 
                      className="super-admin-btn danger"
                      onClick={() => handleConfirmAction('resetSettings', null, 'Are you sure you want to reset all global settings to defaults? This action cannot be undone.')}
                    >
                      <i className="fas fa-undo"></i>
                      Reset to Defaults
                    </button>
                    <button 
                      className="super-admin-btn primary"
                      onClick={() => setShowSettingsModal(true)}
                    >
                      <i className="fas fa-cogs"></i>
                      Advanced Settings
                    </button>
                  </div>
                </div>
                <div className="super-admin-card-body">
                  {settingsLoading ? (
                    <div className="super-admin-loading">
                      <div className="super-admin-spinner"></div>
                      <p>Loading settings...</p>
                    </div>
                  ) : globalSettings ? (
                    <div className="super-admin-settings-content">
                      {/* Settings Navigation */}
                      <div className="super-admin-settings-nav">
                        <button 
                          className={`super-admin-settings-nav-item ${activeSettingsTab === 'platform' ? 'active' : ''}`}
                          onClick={() => setActiveSettingsTab('platform')}
                        >
                          <i className="fas fa-globe"></i>
                          Platform
                        </button>
                        <button 
                          className={`super-admin-settings-nav-item ${activeSettingsTab === 'features' ? 'active' : ''}`}
                          onClick={() => setActiveSettingsTab('features')}
                        >
                          <i className="fas fa-toggle-on"></i>
                          Features
                        </button>
                        <button 
                          className={`super-admin-settings-nav-item ${activeSettingsTab === 'security' ? 'active' : ''}`}
                          onClick={() => setActiveSettingsTab('security')}
                        >
                          <i className="fas fa-shield-alt"></i>
                          Security
                        </button>
                        <button 
                          className={`super-admin-settings-nav-item ${activeSettingsTab === 'payments' ? 'active' : ''}`}
                          onClick={() => setActiveSettingsTab('payments')}
                        >
                          <i className="fas fa-credit-card"></i>
                          Payments
                        </button>
                        <button 
                          className={`super-admin-settings-nav-item ${activeSettingsTab === 'notifications' ? 'active' : ''}`}
                          onClick={() => setActiveSettingsTab('notifications')}
                        >
                          <i className="fas fa-bell"></i>
                          Notifications
                        </button>
                        <button 
                          className={`super-admin-settings-nav-item ${activeSettingsTab === 'analytics' ? 'active' : ''}`}
                          onClick={() => setActiveSettingsTab('analytics')}
                        >
                          <i className="fas fa-chart-line"></i>
                          Analytics
                        </button>
                        <button 
                          className={`super-admin-settings-nav-item ${activeSettingsTab === 'support' ? 'active' : ''}`}
                          onClick={() => setActiveSettingsTab('support')}
                        >
                          <i className="fas fa-headset"></i>
                          Support
                        </button>
                      </div>

                      {/* Settings Content */}
                      <div className="super-admin-settings-panel">
                        {activeSettingsTab === 'platform' && (
                          <div className="super-admin-settings-section">
                            <h4>Platform Configuration</h4>
                            <div className="super-admin-settings-grid">
                              <div className="super-admin-setting-item">
                                <label>Platform Name</label>
                                <input
                                  type="text"
                                  value={editingSettings.platform?.name || ''}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    platform: { ...editingSettings.platform, name: e.target.value }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Description</label>
                                <textarea
                                  value={editingSettings.platform?.description || ''}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    platform: { ...editingSettings.platform, description: e.target.value }
                                  })}
                                  className="super-admin-textarea"
                                  rows={3}
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Version</label>
                                <input
                                  type="text"
                                  value={editingSettings.platform?.version || ''}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    platform: { ...editingSettings.platform, version: e.target.value }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label className="super-admin-checkbox-label">
                                  <input
                                    type="checkbox"
                                    checked={editingSettings.platform?.maintenanceMode || false}
                                    onChange={(e) => setEditingSettings({
                                      ...editingSettings,
                                      platform: { ...editingSettings.platform, maintenanceMode: e.target.checked }
                                    })}
                                  />
                                  Maintenance Mode
                                </label>
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Maintenance Message</label>
                                <textarea
                                  value={editingSettings.platform?.maintenanceMessage || ''}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    platform: { ...editingSettings.platform, maintenanceMessage: e.target.value }
                                  })}
                                  className="super-admin-textarea"
                                  rows={2}
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Max File Size (MB)</label>
                                <input
                                  type="number"
                                  value={Math.round((editingSettings.platform?.maxFileSize || 0) / (1024 * 1024))}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    platform: { ...editingSettings.platform, maxFileSize: parseInt(e.target.value) * 1024 * 1024 }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                            </div>
                            <button 
                              className="super-admin-btn primary"
                              onClick={() => updateGlobalSettings('platform', editingSettings.platform)}
                              disabled={settingsLoading}
                            >
                              Save Platform Settings
                            </button>
                          </div>
                        )}

                        {activeSettingsTab === 'features' && (
                          <div className="super-admin-settings-section">
                            <h4>Feature Toggles</h4>
                            <div className="super-admin-settings-grid">
                              {Object.entries(editingSettings.features || {}).map(([key, value]) => (
                                <div key={key} className="super-admin-setting-item">
                                  <label className="super-admin-checkbox-label">
                                    <input
                                      type="checkbox"
                                      checked={value as boolean}
                                      onChange={(e) => setEditingSettings({
                                        ...editingSettings,
                                        features: { ...editingSettings.features, [key]: e.target.checked }
                                      })}
                                    />
                                    {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
                                  </label>
                                </div>
                              ))}
                            </div>
                            <button 
                              className="super-admin-btn primary"
                              onClick={() => updateGlobalSettings('features', editingSettings.features)}
                              disabled={settingsLoading}
                            >
                              Save Feature Settings
                            </button>
                          </div>
                        )}

                        {activeSettingsTab === 'security' && (
                          <div className="super-admin-settings-section">
                            <h4>Security Configuration</h4>
                            <div className="super-admin-settings-grid">
                              <div className="super-admin-setting-item">
                                <label className="super-admin-checkbox-label">
                                  <input
                                    type="checkbox"
                                    checked={editingSettings.security?.twoFactorAuth || false}
                                    onChange={(e) => setEditingSettings({
                                      ...editingSettings,
                                      security: { ...editingSettings.security, twoFactorAuth: e.target.checked }
                                    })}
                                  />
                                  Enable Two-Factor Authentication
                                </label>
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Password Min Length</label>
                                <input
                                  type="number"
                                  value={editingSettings.security?.passwordMinLength || 8}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    security: { ...editingSettings.security, passwordMinLength: parseInt(e.target.value) }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Session Timeout (minutes)</label>
                                <input
                                  type="number"
                                  value={editingSettings.security?.sessionTimeout || 30}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    security: { ...editingSettings.security, sessionTimeout: parseInt(e.target.value) }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Max Login Attempts</label>
                                <input
                                  type="number"
                                  value={editingSettings.security?.maxLoginAttempts || 5}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    security: { ...editingSettings.security, maxLoginAttempts: parseInt(e.target.value) }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>API Rate Limit (req/min)</label>
                                <input
                                  type="number"
                                  value={editingSettings.security?.apiRateLimit || 100}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    security: { ...editingSettings.security, apiRateLimit: parseInt(e.target.value) }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                            </div>
                            <button 
                              className="super-admin-btn primary"
                              onClick={() => updateGlobalSettings('security', editingSettings.security)}
                              disabled={settingsLoading}
                            >
                              Save Security Settings
                            </button>
                          </div>
                        )}

                        {activeSettingsTab === 'payments' && (
                          <div className="super-admin-settings-section">
                            <h4>Payment Configuration</h4>
                            <div className="super-admin-settings-grid">
                              <div className="super-admin-setting-item">
                                <label>Currency</label>
                                <select
                                  value={editingSettings.payments?.currency || 'USD'}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    payments: { ...editingSettings.payments, currency: e.target.value }
                                  })}
                                  className="super-admin-select"
                                >
                                  <option value="USD">USD</option>
                                  <option value="EUR">EUR</option>
                                  <option value="GBP">GBP</option>
                                  <option value="NGN">NGN</option>
                                </select>
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Tax Rate (%)</label>
                                <input
                                  type="number"
                                  step="0.01"
                                  value={(editingSettings.payments?.taxRate || 0) * 100}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    payments: { ...editingSettings.payments, taxRate: parseFloat(e.target.value) / 100 }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Platform Fee (%)</label>
                                <input
                                  type="number"
                                  step="0.01"
                                  value={(editingSettings.payments?.platformFee || 0) * 100}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    payments: { ...editingSettings.payments, platformFee: parseFloat(e.target.value) / 100 }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Min Withdrawal</label>
                                <input
                                  type="number"
                                  value={editingSettings.payments?.minimumWithdrawal || 50}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    payments: { ...editingSettings.payments, minimumWithdrawal: parseInt(e.target.value) }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Max Withdrawal</label>
                                <input
                                  type="number"
                                  value={editingSettings.payments?.maximumWithdrawal || 10000}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    payments: { ...editingSettings.payments, maximumWithdrawal: parseInt(e.target.value) }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Payout Schedule</label>
                                <select
                                  value={editingSettings.payments?.payoutSchedule || 'weekly'}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    payments: { ...editingSettings.payments, payoutSchedule: e.target.value }
                                  })}
                                  className="super-admin-select"
                                >
                                  <option value="daily">Daily</option>
                                  <option value="weekly">Weekly</option>
                                  <option value="monthly">Monthly</option>
                                </select>
                              </div>
                            </div>
                            <button 
                              className="super-admin-btn primary"
                              onClick={() => updateGlobalSettings('payments', editingSettings.payments)}
                              disabled={settingsLoading}
                            >
                              Save Payment Settings
                            </button>
                          </div>
                        )}

                        {activeSettingsTab === 'notifications' && (
                          <div className="super-admin-settings-section">
                            <h4>Notification Configuration</h4>
                            <div className="super-admin-settings-grid">
                              <div className="super-admin-setting-item">
                                <label className="super-admin-checkbox-label">
                                  <input
                                    type="checkbox"
                                    checked={editingSettings.notifications?.emailEnabled || false}
                                    onChange={(e) => setEditingSettings({
                                      ...editingSettings,
                                      notifications: { ...editingSettings.notifications, emailEnabled: e.target.checked }
                                    })}
                                  />
                                  Enable Email Notifications
                                </label>
                              </div>
                              <div className="super-admin-setting-item">
                                <label className="super-admin-checkbox-label">
                                  <input
                                    type="checkbox"
                                    checked={editingSettings.notifications?.smsEnabled || false}
                                    onChange={(e) => setEditingSettings({
                                      ...editingSettings,
                                      notifications: { ...editingSettings.notifications, smsEnabled: e.target.checked }
                                    })}
                                  />
                                  Enable SMS Notifications
                                </label>
                              </div>
                              <div className="super-admin-setting-item">
                                <label className="super-admin-checkbox-label">
                                  <input
                                    type="checkbox"
                                    checked={editingSettings.notifications?.pushEnabled || false}
                                    onChange={(e) => setEditingSettings({
                                      ...editingSettings,
                                      notifications: { ...editingSettings.notifications, pushEnabled: e.target.checked }
                                    })}
                                  />
                                  Enable Push Notifications
                                </label>
                              </div>
                              <div className="super-admin-setting-item">
                                <label>SMS Provider</label>
                                <select
                                  value={editingSettings.notifications?.smsProvider || 'twilio'}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    notifications: { ...editingSettings.notifications, smsProvider: e.target.value }
                                  })}
                                  className="super-admin-select"
                                >
                                  <option value="twilio">Twilio</option>
                                  <option value="aws-sns">AWS SNS</option>
                                  <option value="sendgrid">SendGrid</option>
                                </select>
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Notification Schedule</label>
                                <select
                                  value={editingSettings.notifications?.notificationSchedule || 'immediate'}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    notifications: { ...editingSettings.notifications, notificationSchedule: e.target.value }
                                  })}
                                  className="super-admin-select"
                                >
                                  <option value="immediate">Immediate</option>
                                  <option value="hourly">Hourly</option>
                                  <option value="daily">Daily</option>
                                </select>
                              </div>
                            </div>
                            <button 
                              className="super-admin-btn primary"
                              onClick={() => updateGlobalSettings('notifications', editingSettings.notifications)}
                              disabled={settingsLoading}
                            >
                              Save Notification Settings
                            </button>
                          </div>
                        )}

                        {activeSettingsTab === 'analytics' && (
                          <div className="super-admin-settings-section">
                            <h4>Analytics Configuration</h4>
                            <div className="super-admin-settings-grid">
                              <div className="super-admin-setting-item">
                                <label className="super-admin-checkbox-label">
                                  <input
                                    type="checkbox"
                                    checked={editingSettings.analytics?.trackingEnabled || false}
                                    onChange={(e) => setEditingSettings({
                                      ...editingSettings,
                                      analytics: { ...editingSettings.analytics, trackingEnabled: e.target.checked }
                                    })}
                                  />
                                  Enable Analytics Tracking
                                </label>
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Google Analytics ID</label>
                                <input
                                  type="text"
                                  value={editingSettings.analytics?.googleAnalyticsId || ''}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    analytics: { ...editingSettings.analytics, googleAnalyticsId: e.target.value }
                                  })}
                                  className="super-admin-input"
                                  placeholder="GA-XXXXXXXXX-X"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Facebook Pixel ID</label>
                                <input
                                  type="text"
                                  value={editingSettings.analytics?.facebookPixelId || ''}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    analytics: { ...editingSettings.analytics, facebookPixelId: e.target.value }
                                  })}
                                  className="super-admin-input"
                                  placeholder="XXXXXXXXXX"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Data Retention (days)</label>
                                <input
                                  type="number"
                                  value={editingSettings.analytics?.dataRetentionDays || 365}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    analytics: { ...editingSettings.analytics, dataRetentionDays: parseInt(e.target.value) }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label className="super-admin-checkbox-label">
                                  <input
                                    type="checkbox"
                                    checked={editingSettings.analytics?.anonymizeData || false}
                                    onChange={(e) => setEditingSettings({
                                      ...editingSettings,
                                      analytics: { ...editingSettings.analytics, anonymizeData: e.target.checked }
                                    })}
                                  />
                                  Anonymize User Data
                                </label>
                              </div>
                            </div>
                            <button 
                              className="super-admin-btn primary"
                              onClick={() => updateGlobalSettings('analytics', editingSettings.analytics)}
                              disabled={settingsLoading}
                            >
                              Save Analytics Settings
                            </button>
                          </div>
                        )}

                        {activeSettingsTab === 'support' && (
                          <div className="super-admin-settings-section">
                            <h4>Support Configuration</h4>
                            <div className="super-admin-settings-grid">
                              <div className="super-admin-setting-item">
                                <label>Support Email</label>
                                <input
                                  type="email"
                                  value={editingSettings.support?.supportEmail || ''}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    support: { ...editingSettings.support, supportEmail: e.target.value }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Support Phone</label>
                                <input
                                  type="tel"
                                  value={editingSettings.support?.supportPhone || ''}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    support: { ...editingSettings.support, supportPhone: e.target.value }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Help Center URL</label>
                                <input
                                  type="url"
                                  value={editingSettings.support?.helpCenterUrl || ''}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    support: { ...editingSettings.support, helpCenterUrl: e.target.value }
                                  })}
                                  className="super-admin-input"
                                />
                              </div>
                              <div className="super-admin-setting-item">
                                <label>Ticket System</label>
                                <select
                                  value={editingSettings.support?.ticketSystem || 'internal'}
                                  onChange={(e) => setEditingSettings({
                                    ...editingSettings,
                                    support: { ...editingSettings.support, ticketSystem: e.target.value }
                                  })}
                                  className="super-admin-select"
                                >
                                  <option value="internal">Internal</option>
                                  <option value="zendesk">Zendesk</option>
                                  <option value="freshdesk">Freshdesk</option>
                                  <option value="intercom">Intercom</option>
                                </select>
                              </div>
                              <div className="super-admin-setting-item">
                                <label className="super-admin-checkbox-label">
                                  <input
                                    type="checkbox"
                                    checked={editingSettings.support?.liveChatEnabled || false}
                                    onChange={(e) => setEditingSettings({
                                      ...editingSettings,
                                      support: { ...editingSettings.support, liveChatEnabled: e.target.checked }
                                    })}
                                  />
                                  Enable Live Chat
                                </label>
                              </div>
                              <div className="super-admin-setting-item">
                                <label className="super-admin-checkbox-label">
                                  <input
                                    type="checkbox"
                                    checked={editingSettings.support?.autoResponseEnabled || false}
                                    onChange={(e) => setEditingSettings({
                                      ...editingSettings,
                                      support: { ...editingSettings.support, autoResponseEnabled: e.target.checked }
                                    })}
                                  />
                                  Enable Auto Responses
                                </label>
                              </div>
                            </div>
                            <button 
                              className="super-admin-btn primary"
                              onClick={() => updateGlobalSettings('support', editingSettings.support)}
                              disabled={settingsLoading}
                            >
                              Save Support Settings
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  ) : (
                    <div className="super-admin-error">
                      <p>Failed to load settings. Please try again.</p>
                      <button 
                        onClick={fetchGlobalSettings}
                        className="super-admin-btn primary"
                      >
                        Retry
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

      {/* Bulk Message Modal */}
      {showBulkMessage && (
        <div className="super-admin-modal-overlay">
          <div className="super-admin-modal">
            <div className="super-admin-modal-header">
              <h3>Send Bulk Message</h3>
              <button 
                onClick={() => setShowBulkMessage(false)}
                className="super-admin-modal-close"
              >
                <i className="fas fa-times"></i>
              </button>
            </div>
            <div className="super-admin-modal-body">
              <div className="super-admin-form-group">
                <label>Select Users:</label>
                <div className="super-admin-user-selection">
                  {users.map((user) => (
                    <label key={user.id} className="super-admin-checkbox">
                      <input
                        type="checkbox"
                        checked={selectedUsersForBulk.includes(user.id)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setSelectedUsersForBulk([...selectedUsersForBulk, user.id]);
                          } else {
                            setSelectedUsersForBulk(selectedUsersForBulk.filter(id => id !== user.id));
                          }
                        }}
                      />
                      <span>{user.name} ({user.email})</span>
                    </label>
                  ))}
                </div>
              </div>
              <div className="super-admin-form-group">
                <label>Message:</label>
                <textarea
                  value={bulkMessage}
                  onChange={(e) => setBulkMessage(e.target.value)}
                  placeholder="Enter your message..."
                  className="super-admin-textarea"
                  rows={4}
                />
              </div>
            </div>
            <div className="super-admin-modal-footer">
              <button 
                onClick={() => setShowBulkMessage(false)}
                className="super-admin-btn secondary"
              >
                Cancel
              </button>
              <button 
                onClick={sendBulkMessage}
                disabled={!bulkMessage.trim() || selectedUsersForBulk.length === 0}
                className="super-admin-btn primary"
              >
                Send Message
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Confirmation Dialog */}
      {showConfirmDialog && confirmAction && (
        <div className="super-admin-modal-overlay">
          <div className="super-admin-confirm-dialog">
            <div className="super-admin-confirm-header">
              <i className="fas fa-exclamation-triangle"></i>
              <h3>Confirm Action</h3>
            </div>
            <div className="super-admin-confirm-body">
              <p>Are you sure you want to perform this action? This cannot be undone.</p>
              <div className="super-admin-confirm-details">
                {confirmAction.type === 'deleteUser' && (
                  <p><strong>User:</strong> {confirmAction.data.name}</p>
                )}
                {confirmAction.type === 'resetSettings' && (
                  <p><strong>Action:</strong> Reset all settings to defaults</p>
                )}
                {confirmAction.type === 'bulkMessage' && (
                  <p><strong>Recipients:</strong> {selectedUsersForBulk.length} users</p>
                )}
              </div>
            </div>
            <div className="super-admin-confirm-footer">
              <button 
                onClick={() => setShowConfirmDialog(false)}
                className="super-admin-btn secondary"
              >
                Cancel
              </button>
              <button 
                onClick={executeConfirmedAction}
                className="super-admin-btn danger"
              >
                Confirm
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 